name: CI Workflow

on:
  pull_request:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart
        uses: zgosalvez/github-actions-analyze-dart@v3

      - name: Build apk
        run: flutter build apk

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: build/app/outputs/apk/release/app-release.apk

  versioning:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.VERSIONING }}

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Get current version from file
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION=${{ env.VERSION }}
          NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$2 += 1; print}')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo $NEW_VERSION > version.txt

      - name: Commit, Tag, and Push
        env:
          GH_PAT: ${{ secrets.VERSIONING }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          
          # Verificar si la rama existe en origin
          if git ls-remote --exit-code --heads origin ${{ github.base_ref }}; then
              echo "Branch ${{ github.base_ref }} exists in origin."
          else
              echo "Error: branch ${{ github.base_ref }} not found in origin."
              exit 1
          fi
          
          # Stash any local changes
          git stash
          
          # Checkout de la rama, creándola si no existe localmente
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          
          # Obtener cambios más recientes de la rama en origin
          git pull origin ${{ github.base_ref }}
          
          # Apply stashed changes
          git stash pop || true
          
          # Realizar los cambios necesarios
          git add version.txt
          git commit -m "Increment version to ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}
          
          # Hacer push del commit y del tag
          git push origin ${{ env.NEW_VERSION }}
          git push origin ${{ github.base_ref }}

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

  create-release:
    runs-on: ubuntu-latest
    needs: [build, versioning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK Artifact
        uses: actions/download-artifact@v3
        with:
          name: apk
          path: build/app/outputs/apk/release

      - name: Download Version Artifact
        uses: actions/download-artifact@v3
        with:
          name: version
          path: .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/apk/release/app-release.apk
          tag_name: ${{ env.NEW_VERSION }}
          name: "Release ${{ env.NEW_VERSION }}"
          prerelease: ${{ github.base_ref == 'development' }}
