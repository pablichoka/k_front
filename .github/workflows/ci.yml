name: CI Workflow

on:
  pull_request:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.24.3

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart
        uses: zgosalvez/github-actions-analyze-dart@v3

      - name: Build apk
        run: flutter build apk

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: build/app/outputs/apk/release/app-release.apk

  versioning:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read current version from file
        id: read_version
        run: |
          VERSION=$(cat version.txt)
          echo "CURRENT_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_VERSION::${VERSION}"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse v${{ steps.read_version.outputs.CURRENT_VERSION }} >/dev/null 2>&1; then
            echo "Tag already exists."
            echo "::set-output name=tag_exists::true"
          else
            echo "::set-output name=tag_exists::false"
          fi

      - name: Create new version tag
        id: create_version_tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git tag v${{ steps.read_version.outputs.CURRENT_VERSION }}
          echo "::set-output name=TAG_NAME::v${{ steps.read_version.outputs.CURRENT_VERSION }}"

      - name: Increment version
        run: |
          CURRENT_VERSION=${{ steps.read_version.outputs.CURRENT_VERSION }}
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$2 += 1; print $1"."$2}')
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo ${NEW_VERSION}


      - name: Write new version in file
        uses: "DamianReeves/write-file-action@master"
        with:
          path: version.txt
          write-mode: overwrite
          contents: |
            ${{ env.NEW_VERSION }}
          
      - name: Commit & Push to dev
        uses: Andro999b/push@v1.3
        with:
          github_token: ${{ secrets.VERSIONING }}
          branch: development
          force: true
          message: 'Overwritten by Github Actions'

      - name: Push tag to repository
        if: steps.check_tag.outputs.tag_exists == 'false'
        env:
          VERSIONING: ${{ secrets.VERSIONING }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.VERSIONING }}@github.com/${{ github.repository }}
          git push origin ${{ steps.create_version_tag.outputs.TAG_NAME }}

  create-release:
    runs-on: ubuntu-latest
    needs: versioning
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download APK Artifact
        uses: actions/download-artifact@v3
        with:
          name: apk
          path: build/app/outputs/apk/release

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=tag::$latest_tag"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/apk/release/app-release.apk
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: "Release ${{ steps.get_tag.outputs.tag }}"
          prerelease: false
        env:
          VERSIONING: ${{ secrets.VERSIONING }}

  create-prerelease:
    runs-on: ubuntu-latest
    needs: versioning
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download APK Artifact
        uses: actions/download-artifact@v3
        with:
          name: apk
          path: build/app/outputs/apk/release

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=tag::$latest_tag"

      - name: Create Prerelease
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/apk/release/app-release.apk
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: "Pre-release ${{ steps.get_tag.outputs.tag }}"
          prerelease: true
        env:
          VERSIONING: ${{ secrets.VERSIONING }}
